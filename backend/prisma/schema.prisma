generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  githubId  String?   @unique
  githubUsername String?
  githubAccessToken String?
  projects  Project[]
  createdAt DateTime  @default(now())
}

model Project {
  id        Int       @id @default(autoincrement())
  name      String
  gitUrl    String    @unique
  language  String
  status    String    @default("Analyzing") // "Analyzing" | "Completed" | "Failed"
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  issues    Issue[]
  fileAsts  FileAst[]
  files     ProjectFile[]
  createdAt DateTime  @default(now())
}

model Issue {
  id               Int      @id @default(autoincrement())
  project          Project  @relation(fields: [projectId], references: [id])
  projectId        Int
  filePath         String
  functionName     String?
  className        String?
  issueType        String   // e.g., "HighComplexity", "DuplicateCode", "LongMethod", "GodClass"
  severity         String   @default("Medium") // "Low", "Medium", "High", "Critical"
  confidence       Int      @default(75) // 0-100
  description      String?
  recommendation   String?
  lineStart        Int?
  lineEnd          Int?
  metadata         Json?    // Store details like complexity score, metrics
  codeBlock        String
  status           String   @default("Pending") // "Pending", "Generating", "Resolved"
  duplicateGroupId String?  // For linking duplicate code issues
  createdAt        DateTime @default(now())
  
  @@index([projectId])
  @@index([issueType])
  @@index([severity])
  @@index([duplicateGroupId])
}

model FileAst {
  id         Int      @id @default(autoincrement())
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  Int
  filePath   String
  language   String
  astFormat  String   // e.g., "s-expression" | "ts-compiler"
  ast        String   // large text representation
  createdAt  DateTime @default(now())

  @@index([projectId])
  @@unique([projectId, filePath])
}

model ProjectFile {
  id         Int      @id @default(autoincrement())
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  Int
  filePath   String
  ext        String
  supported  Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([projectId])
  @@unique([projectId, filePath])
}
